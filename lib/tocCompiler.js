// Generated by CoffeeScript 1.8.0
(function() {
  module.exports = function(param, iToc, tokens) {
    var addSection, currentLevel, currentStack, i, k, makeToc, nextStack, root, rootLevel, tocTokens, token, _i, _j, _k, _ref, _ref1, _ref2, _ref3;
    addSection = 'numbered' in param;
    tocTokens = [];
    root = [];
    rootLevel = 0;
    currentStack = root;
    currentLevel = rootLevel;
    for (i = _i = _ref = iToc + 1, _ref1 = tokens.length; _ref <= _ref1 ? _i < _ref1 : _i > _ref1; i = _ref <= _ref1 ? ++_i : --_i) {
      token = tokens[i];
      if (token.type === "heading") {
        if (token.depth > currentLevel) {
          for (k = _j = rootLevel, _ref2 = token.depth - currentLevel; rootLevel <= _ref2 ? _j < _ref2 : _j > _ref2; k = rootLevel <= _ref2 ? ++_j : --_j) {
            nextStack = [];
            currentStack.push(nextStack);
            currentStack = nextStack;
          }
          currentLevel = token.depth;
        } else if (currentLevel > token.depth) {
          currentStack = root;
          for (k = _k = rootLevel, _ref3 = token.depth; rootLevel <= _ref3 ? _k < _ref3 : _k > _ref3; k = rootLevel <= _ref3 ? ++_k : --_k) {
            currentStack = currentStack[currentStack.length - 1];
          }
          currentLevel = token.depth;
        }
        currentStack.push(token);
      }
    }
    while (root.length === 1) {
      root = root[0];
    }
    makeToc = function(stack, toc, levelStacks) {
      var headingId, item, label, tocId, x, y;
      toc.push({
        type: 'list_start',
        ordered: false,
        id: 'toc'
      });
      x = 0;
      while (x < stack.length) {
        item = stack[x];
        if (item instanceof Array) {
          makeToc(item, toc, levelStacks.concat(1));
          levelStacks[levelStacks.length - 1]++;
        } else {
          tocId = levelStacks.join(".");
          label = item.text;
          if (addSection) {
            label = tocId + " " + label;
          }
          item.text = label;
          headingId = label.toLowerCase().replace(/[^\w]+/g, '-');
          toc.push({
            type: 'list_item_start'
          });
          toc.push({
            type: 'text',
            text: "[" + label + "](#" + headingId + ")"
          });
          y = x + 1;
          while (y < stack.length && stack[y] instanceof Array) {
            makeToc(stack[y], toc, levelStacks.concat(1));
            x++;
            y++;
          }
          toc.push({
            type: 'list_item_end'
          });
          levelStacks[levelStacks.length - 1]++;
        }
        x++;
      }
      return toc.push({
        type: 'list_end'
      });
    };
    makeToc(root, tocTokens, [1]);
    return tocTokens;
  };

}).call(this);

//# sourceMappingURL=tocCompiler.js.map
