// Generated by CoffeeScript 1.8.0

/*
  marked.setOptions({   # override default options
    renderer : new marked.ReactRenderer(marked.options.renderer)
  })

  TODO:
  https://github.com/jmcmanus/pagedown-extra
  add support for definition list
  add support for in-page jump link
 */

(function() {
  var ReactRenderer, marked,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  marked = require("./marked");

  module.exports = ReactRenderer = (function(_super) {
    __extends(ReactRenderer, _super);

    function ReactRenderer(options, R) {
      this.options = options;
      this.R = R;
      this.lastline = -1;
      this.lastcur = 0;
    }

    ReactRenderer.prototype.getAppender = function() {
      return {
        _body: [],
        append: function(toks) {
          return this._body = this._body.concat(toks);
        },
        ret: function() {
          return this._body;
        }
      };
    };

    ReactRenderer.prototype.enterToken = function(token) {
      if (token.line !== void 0 && this.lastline !== token.line) {
        this.lastline = token.line;
        return this.lastcur = 0;
      }
    };

    ReactRenderer.prototype._prop = function(p) {
      p || (p = {});
      if (this.lastcur++ === 0) {
        p.key = this.lastline;
        p.ref = this.lastline;
      } else {
        p.key = "" + this.lastline + "_" + this.lastcur;
      }
      return p;
    };

    ReactRenderer.prototype.code = function(code, lang, escaped) {
      var out;
      if (this.options.highlight) {
        out = this.options.highlight(code, lang);
        if (out !== null && out !== code) {
          escaped = true;
          code = out;
        }
      }
      return this.R.pre(this._prop(), this.R.code(this._prop({
        className: lang ? this.options.langPrefix + marked.escape(lang, true) : void 0,
        dangerouslySetInnerHTML: {
          __html: escaped ? code : marked.escape(code, true)
        }
      })));
    };

    ReactRenderer.prototype.blockquote = function(quote) {
      return this.R.blockquote(this._prop({
        children: quote
      }));
    };

    ReactRenderer.prototype.html = function(html) {
      return this.R.div(this._prop({
        dangerouslySetInnerHTML: {
          __html: html
        }
      }));
    };

    ReactRenderer.prototype.heading = function(inlineBody, level, raw) {
      return this.R['h' + level](this._prop({
        dangerouslySetInnerHTML: {
          __html: inlineBody
        },
        id: this.options.headerPrefix + raw.toLowerCase().replace(/[^\w]+/g, '-')
      }));
    };

    ReactRenderer.prototype.list = function(items, ordered, id) {
      var type;
      type = ordered ? 'ol' : 'ul';
      return this.R[type](this._prop({
        children: items,
        id: id
      }));
    };

    ReactRenderer.prototype.listitem = function(body) {
      var e, i, _i, _len;
      for (i = _i = 0, _len = body.length; _i < _len; i = ++_i) {
        e = body[i];
        if (typeof e === 'string') {
          body[i] = this.R.div({
            dangerouslySetInnerHTML: {
              __html: e
            }
          });
        }
      }
      return this.R.li(this._prop({
        children: body
      }));
    };

    ReactRenderer.prototype.paragraph = function(inlineBody) {
      return this.R.p(this._prop({
        dangerouslySetInnerHTML: {
          __html: inlineBody
        }
      }));
    };

    ReactRenderer.prototype.table = function(header, rows) {
      return this.R.table(this._prop(), this.R.thead(this._prop({
        children: header
      })), this.R.tbody(this._prop({
        children: rows
      })));
    };

    ReactRenderer.prototype.tablecell = function(inlineBody, flags) {
      var props, type;
      type = flags.header ? 'th' : 'td';
      props = this._prop({
        dangerouslySetInnerHTML: {
          __html: inlineBody
        },
        style: {}
      });
      if (flags.align) {
        props.style.textAlign = flags.align;
      }
      return this.R[type](props);
    };

    ReactRenderer.prototype.tablerow = function(cells) {
      return this.R.tr(this._prop({
        children: cells
      }));
    };

    ReactRenderer.prototype.hr = function() {
      return this.R.hr(this._prop());
    };


    /* inline render, leave default implementation
    strong : (text)->
      return '<strong>' + text + '</strong>';
    em : (text) ->
      return '<em>' + text + '</em>';
    codespan : (text)->
      return '<code>' + text + '</code>';
    br : ()->
      return '<br/>'
    del : (text)->
      return '<del>' + text + '</del>';
    link : (href, title, text) ->
    image : (href, title, text)->
     */

    return ReactRenderer;

  })(marked.Renderer);

}).call(this);

//# sourceMappingURL=ReactRenderer.js.map
