// Generated by CoffeeScript 1.8.0

/*
  marked.setOptions({   # override default options
    renderer : new marked.ReactRenderer(marked.options.renderer)
  })
 */

(function() {
  var ReactRenderer, marked;

  marked = require("./marked");

  marked.ifHtmlEscape = false;

  module.exports = ReactRenderer = (function() {
    function ReactRenderer(options, R) {
      this.options = options;
      this.R = R;
      this.lastline = -1;
      this.lastcur = 0;
    }

    ReactRenderer.prototype.getAppender = function() {
      return {
        _body: [],
        append: function(toks) {
          return this._body = this._body.concat(toks);
        },
        ret: function() {
          return this._body;
        }
      };
    };

    ReactRenderer.prototype.enterToken = function(token) {
      if (token.line !== void 0 && this.lastline !== token.line) {
        this.lastline = token.line;
        return this.lastcur = 0;
      }
    };

    ReactRenderer.prototype._prop = function(p) {
      p || (p = {});
      if (this.lastcur++ === 0) {
        p.key = this.lastline;
        p.ref = this.lastline;
      } else {
        p.key = "" + this.lastline + "_" + this.lastcur;
      }
      return p;
    };

    ReactRenderer.prototype.code = function(code, lang, escaped) {
      var out;
      if (this.options.highlight) {
        out = this.options.highlight(code, lang);
        if (out !== null && out !== code) {
          escaped = true;
          code = out;
        }
      }
      return this.R.pre(this._prop(), this.R.code(this._prop({
        className: lang ? this.options.langPrefix + marked.escape(lang, true) : void 0,
        dangerouslySetInnerHTML: {
          __html: escaped ? code : marked.escape(code, true)
        }
      })));
    };

    ReactRenderer.prototype.blockquote = function(quote) {
      return this.R.blockquote(this._prop({
        children: quote
      }));
    };

    ReactRenderer.prototype.html = function(html) {
      return this.R.div(this._prop({
        dangerouslySetInnerHTML: {
          __html: html
        }
      }));
    };

    ReactRenderer.prototype.heading = function(text, level, raw) {
      return this.R['h' + level](this._prop({
        children: text,
        id: this.options.headerPrefix + raw.toLowerCase().replace(/[^\w]+/g, '-')
      }));
    };

    ReactRenderer.prototype.hr = function() {
      return this.R.hr(this._prop());
    };

    ReactRenderer.prototype.list = function(body, ordered, id) {
      var type;
      type = ordered ? 'ol' : 'ul';
      return this.R[type](this._prop({
        children: body,
        id: id
      }));
    };

    ReactRenderer.prototype.listitem = function(text) {
      return this.R.li(this._prop({
        children: text
      }));
    };

    ReactRenderer.prototype.paragraph = function(text) {
      return this.R.p(this._prop(), text);
    };

    ReactRenderer.prototype.table = function(header, body) {
      return this.R.table(this._prop(), this.R.thead(this._prop({
        children: header
      })), this.R.tbody(this._prop({
        children: body
      })));
    };

    ReactRenderer.prototype.tablerow = function(content) {
      return this.R.tr(this._prop({
        children: content
      }));
    };

    ReactRenderer.prototype.tablecell = function(content, flags) {
      var props, type;
      type = flags.header ? 'th' : 'td';
      props = this._prop({
        children: content,
        style: {}
      });
      if (flags.align) {
        props.style.textAlign = flags.align;
      }
      return this.R[type](props);
    };

    ReactRenderer.prototype.strong = function(text) {
      return this.R.strong(this._prop(), text);
    };

    ReactRenderer.prototype.em = function(text) {
      return this.R.em(this._prop(), text);
    };

    ReactRenderer.prototype.codespan = function(text) {
      return this.R.code(this._prop(), text);
    };

    ReactRenderer.prototype.br = function() {
      return this.R.br(this._prop());
    };

    ReactRenderer.prototype.del = function(text) {
      return this.R.del(this._prop(), text);
    };

    ReactRenderer.prototype.link = function(href, title, text) {
      var e, prot;
      if (this.options.sanitize) {
        try {
          prot = decodeURIComponent(unescape(href)).replace(/[^\w:]/g, '').toLowerCase();
        } catch (_error) {
          e = _error;
          return this.R.a(this._prop());
        }
        if (prot.indexOf('javascript:') === 0) {
          return this.R.a(this._prop());
        }
      }
      return this.R.a(this._prop({
        href: href,
        title: title
      }), text);
    };

    ReactRenderer.prototype.image = function(href, title, text) {
      return this.R.img(this._prop({
        src: href,
        title: title,
        alt: text
      }));
    };

    return ReactRenderer;

  })();

}).call(this);

//# sourceMappingURL=ReactRenderer.js.map
