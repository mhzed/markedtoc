// Generated by CoffeeScript 1.8.0

/*
  tokens:  returned by marked lexer
  compilerMap:  {
    name : (param, iOffset, tokens) ->
       * name: name of tag, or element name
       * param: parsed xml attributes stored as object
       * iOffset: offset of plugin marker in tokens
       * tokens:  the original tokens returned by marked lexer
       * return compiled tokens
  }
  returns:  compiled tokens
 */

(function() {
  var parseXmlAttr;

  parseXmlAttr = function(str) {
    var m, o, t, _i, _len, _ref;
    o = {};
    _ref = str.split(/\s+/);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      t = _ref[_i];
      if ((m = /^([a-zA-Z_:][-a-zA-Z0-9_:.]*)\s*=?\s*['"]?(.*?)['"]?\s*$/.exec(t))) {
        o[m[1]] = m[2];
      }
    }
    return o;
  };

  module.exports = function(tokens, compilerMap) {
    var compileToken, compiledTokens, i, tok, _i, _len;
    compileToken = function(token, i) {
      var all, m, param, tag;
      if (token.type === "html") {
        m = /^<(\w+)(.*?)\/?>/.exec(token.text);
        if (m) {
          all = m[0], tag = m[1], param = m[2];
          param = parseXmlAttr(param);
          if (tag in compilerMap) {
            return compilerMap[tag](param, i, tokens);
          }
        }
      }
      return token;
    };
    compiledTokens = [];
    for (i = _i = 0, _len = tokens.length; _i < _len; i = ++_i) {
      tok = tokens[i];
      compiledTokens = compiledTokens.concat(compileToken(tok, i));
    }
    compiledTokens.links = tokens.links;
    return compiledTokens;
  };

}).call(this);

//# sourceMappingURL=pluginCompiler.js.map
