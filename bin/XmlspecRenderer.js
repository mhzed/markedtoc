// Generated by CoffeeScript 1.8.0
(function() {
  var XmlspecRenderer, escapeXml, marked,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  marked = require('./../lib/marked');

  escapeXml = function(xml, encode) {
    var rex;
    rex = !encode ? /&(?!#?\w+;)/g : /&/g;
    return xml.replace(rex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
  };

  XmlspecRenderer = (function(_super) {
    __extends(XmlspecRenderer, _super);

    function XmlspecRenderer(options) {
      this.sectionStack = [];
      this.bodyState = "none";
      XmlspecRenderer.__super__.constructor.call(this, options);
      this.options.xhtml = true;
      this.list_ordered = [];
    }

    XmlspecRenderer.prototype.enterToken = function(token) {
      switch (token.type) {
        case 'list_start':
          return this.list_ordered.push(token.ordered);
        case 'list_end':
          return this.list_ordered.pop();
      }
    };

    XmlspecRenderer.prototype.code = function(code, lang, escaped) {
      return "<eg>\n" + (escaped ? code : escapeXml(code)) + "\n</eg>";
    };

    XmlspecRenderer.prototype._headingXml = function(level, text, id) {
      var ret;
      if (level === 1) {
        return "<spec>";
      } else {
        ret = "";
        if (this.bodyState === "none") {
          ret = "<body>";
          this.bodyState = "begun";
        }
        ret += "<div" + (level - 1) + " id='" + id + "'><head>" + text + "</head>";
        return ret;
      }
    };

    XmlspecRenderer.prototype.heading = function(text, level, raw) {
      var id, ret;
      id = raw.toLowerCase().replace(/[^\w]+/g, '-');
      ret = this.closeHeading(level, id);
      ret += this._headingXml(level, text, id);
      return ret;
    };

    XmlspecRenderer.prototype.closeHeading = function(nextLevel, nextId) {
      var lastId, lastLevel, lastlevel, level, ret, secs;
      ret = "";
      if (nextLevel === void 0) {
        nextLevel = 0;
      }
      if (this.sectionStack.length > 0) {
        secs = (function() {
          var _i, _len, _ref, _ref1, _results;
          _ref = this.sectionStack.slice(0).reverse();
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _ref1 = _ref[_i], lastLevel = _ref1[0], lastId = _ref1[1];
            if (lastLevel >= nextLevel) {
              _results.push([lastLevel, lastId]);
            }
          }
          return _results;
        }).call(this);
        if (secs.length > 0) {
          ret = ((function() {
            var _i, _len, _ref, _results;
            _ref = secs.slice(0, -1);
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              level = _ref[_i][0];
              _results.push("</div" + (level - 1) + ">");
            }
            return _results;
          })()).join("");
          lastlevel = secs[secs.length - 1][0];
          if (lastlevel === 1) {
            ret += (this.bodyState === "end" ? '</spec>' : '</body></spec>');
          } else {
            ret += "</div" + (lastlevel - 1) + ">";
          }
          this.sectionStack = this.sectionStack.slice(0, -secs.length);
        }
      }
      if (nextLevel) {
        this.sectionStack.push([nextLevel, nextId]);
      }
      return ret;
    };

    XmlspecRenderer.prototype.list = function(body, ordered) {
      if (ordered) {
        return "<ol type='a'>" + body + "</ol>";
      } else {
        return "<ulist>" + body + "</ulist>";
      }
    };

    XmlspecRenderer.prototype.listitem = function(text) {
      if (this.list_ordered.slice(-1)[0]) {
        return XmlspecRenderer.__super__.listitem.call(this, text);
      } else {
        return "<item>" + text + "</item>";
      }
    };

    XmlspecRenderer.prototype.paragraph = function(text) {
      return XmlspecRenderer.__super__.paragraph.call(this, text);
    };

    XmlspecRenderer.prototype.html = function(html) {
      var ret;
      ret = "";
      if (/<back>/.test(html)) {
        ret += this.closeHeading(2, "back");
        ret += "</body>";
        this.bodyState = "end";
        this.sectionStack.pop();
      }
      return ret + XmlspecRenderer.__super__.html.call(this, html);
    };

    XmlspecRenderer.prototype.blockquote = function(quote) {
      return "<quote>" + quote + "</quote>";
    };

    return XmlspecRenderer;

  })(marked.Renderer);

  module.exports = XmlspecRenderer;

}).call(this);

//# sourceMappingURL=XmlspecRenderer.js.map
