// Generated by CoffeeScript 1.8.0
(function() {
  var findport, fs, future, marked, mime, net, open, path, preview, url;

  open = require('open');

  path = require('path');

  fs = require('fs');

  marked = require("./../lib/marked");

  url = require("url");

  net = require('net');

  findport = require("find-free-port");

  future = require("phuture");

  mime = require('mime-types');

  module.exports = preview = {
    startServer: function(filename, css, port, saveOnChangeFile) {
      return findport(port, port + 100, '127.0.0.1', function(err, port) {
        var http;
        css || (css = 'default');
        http = require('http');
        return http.createServer(function(req, res) {
          var content, ctype, f, lfp, mjp, ourl;
          if (preview._exitFuture) {
            preview._exitFuture.cancel();
          }
          ourl = url.parse(req.url);
          mjp = /jsonp=([_\w\.]+)/.exec(ourl.query);
          if (mjp) {
            f = mjp[1];
            return preview._pushFuture = future.once(1000, function(changed) {
              if (changed == null) {
                changed = false;
              }
              res.writeHead(200, {
                'Content-Type': 'text/javascript'
              });
              res.end("" + f + "(" + changed + ")");
              return preview._exitFuture = future.once(1000, function() {
                console.log("Browser closed, exit.");
                return process.exit(0);
              });
            });
          } else if (ourl.pathname === "/") {
            res.writeHead(200, {
              'Content-Type': 'text/html'
            });
            content = preview.render(filename, css);
            if (saveOnChangeFile) {
              fs.writeFileSync(saveOnChangeFile, content);
            }
            return res.end(content);
          } else {
            lfp = path.resolve(filename, ".." + ourl.pathname);
            if (fs.existsSync(lfp)) {
              ctype = mime.lookup(path.extname(lfp)) || "applicaiton/octet-stream";
              res.writeHead(200, {
                'Content-Type': ctype
              });
              return fs.createReadStream(lfp).pipe(res);
            } else {
              res.writeHead(404, {});
              return res.end();
            }
          }
        }).listen(port, '127.0.0.1', function() {
          var onChange;
          onChange = (function(_this) {
            return function() {
              console.log("" + filename + " changed");
              preview._pushFuture.finish(true);
              return fs.watch(filename, onChange);
            };
          })(this);
          fs.watch(filename, onChange);
          return open("http://127.0.0.1:" + port);
        });
      });
    },
    _pushFuture: void 0,
    _exitFuture: void 0,
    render: function(inFile, css) {
      var style;
      if (/:\/\//.test(css)) {
        style = '<link rel="stylesheet" type="text/css" href="' + css + '">';
      } else if (fs.existsSync(path.resolve(css))) {
        style = "<style>\n" + (fs.readFileSync(path.resolve(css))) + "\n</style>";
      } else {
        style = "<style>\n" + (require('../theme/default_css')) + "\n</style>";
      }
      return "<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\"/>\n  <title>" + (path.basename(inFile)) + "</title>\n  " + style + "\n  <script>\n    // JSONP-comet poll for reloading page, sever writes back jsonp(true|false), true: reload, false: no reload\n    // poll interval is determined in server\n    (window.mp = {\n        _s : 0\n      , init: function() {\n            document.addEventListener( \"DOMContentLoaded\", function() {\n              window.mp.injectScript('/?jsonp=mp.jsonpCallback');\n            });\n          }\n      , cleanScript : undefined\n      , injectScript: function(src) {\n          window.mp.cleanScript = undefined;\n          src += \"&_s=\" + (window.mp._s++)\n          var stag = document.createElement('script');\n          stag.src = src;\n          document.body.appendChild(stag);\n          window.mp.cleanScript = function() {\n            stag.parentNode.removeChild(stag);\n          }\n        }\n      , jsonpCallback: function(changed) {\n          if (window.mp.cleanScript) window.mp.cleanScript();\n          if (changed) window.location.reload();\n          else window.mp.injectScript('/?jsonp=mp.jsonpCallback');\n        }\n    }).init();\n  </script>\n</head>\n<body>\n " + (marked(fs.readFileSync(inFile, 'utf-8'))) + "\n</body>\n</html>";
    },
    save: function(inFile, css, outFile) {
      css || (css = 'default');
      return fs.writeFileSync(outFile, preview.render(inFile, css));
    }
  };

}).call(this);

//# sourceMappingURL=preview.js.map
